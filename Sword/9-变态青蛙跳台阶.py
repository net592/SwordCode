"""
题目描述

一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。

分析：所有情况的和可以分解为
第一次跳0个台阶，剩余n个台阶的跳法+
第一次跳1个台阶，剩余n-1个台阶的跳法+
第一次跳2个台阶，剩余n-2个台阶的跳法+...+
第一次跳n-1个台阶，剩余1个台阶的跳法
所以可以使用递归解决，出口为1个台阶只有一种跳法，2个台阶有两种跳法。
"""
class Solution:
    def jumpFloorII(self, number):
        # write code here
        if number == 1:
            return 1
        if number == 2:
            return 2
        count = 1
        while number > 1:
            count += self.jumpFloorII(number-1)
            number -= 1
        return coun

"""
推导发现规律，应该是最简单代码了
这个题目是跳台阶的进阶版，其实跟大家分析一下，这道题其实比上一道题简单。在这道题目中，青蛙可以随意一次性跳n级台阶，也就是说如果青蛙想我先枚举一下前几级台阶的跳法数量：

第一级台阶：1=1（直接从平面跳过来）

第二级台阶：1+1=2（从平面跳过来或从第一级跳过来）

第三级台阶：1+2+1=4（从平面跳过来或从第一级或从第二级跳过来）

第四级台阶：1+2+4+1=8

第五级台阶：1+2+4+8+1=16

第六级台阶：1+2+4+8+16+1=32

第七级台阶：1+2+4+8+16+32+1=64

大家观察规律可以看出来下一级台阶的方法数量是前一级台阶的两倍，正好是2的次方： 
所以我们就可以很简单的写出算法：

1
2
3
4
"""
function jumpFloorII(number)
{
    return Math.pow(2, number-1);
}