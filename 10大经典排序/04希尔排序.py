"""
希尔排序（Shell Sort）

1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序
希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。
希尔排序是基于插入排序的以下两点性质而提出改进方法的：
插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；
但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；
希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。
算法描述
先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：
选择一个增量序列t1，t2，…，tk，其中ti>tj，tk=1；
按增量序列个数k，对序列进行k 趟排序；
每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度
"""

arr = [5,3,65,11,1]

def shell_sort(arr):
    """
    希尔排序：类似于分组的插入排序
    """
    # 结算列表的长度
    n = len(arr)
    gap = n >> 1  # 这里用 n//2（整除2）也可以
    while gap > 0:
        # 从第gap个元素，逐个对其所在组进行直接插入排序操作
        for i in range(gap, n):
            temp = i
            print(temp, i, gap, n)
            while (temp - gap) >= 0 and arr[temp] < arr[temp - gap]:
                print(arr, arr[temp], arr[temp - gap])
                arr[temp], arr[temp - gap] = arr[temp - gap], arr[temp]
                temp -= gap
        gap >>= 1
    return arr

if __name__ == '__main__':
    print(shell_sort(arr))